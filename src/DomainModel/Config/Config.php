<?php

/*
 * This file is part of git-pull-request/git-pull-request.
 *
 * (c) Julien Dufresne <https://github.com/git-pull-request/git-pull-request>
 *
 * For the full copyright and license information, please view
 * the LICENSE file that was distributed with this source code.
 */

declare(strict_types=1);

namespace GitPullRequest\DomainModel\Config;

use GitPullRequest\Git\Git;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Yaml\Exception\ParseException;
use Symfony\Component\Yaml\Yaml;

/**
 * Manage config files.
 */
final class Config
{
    /** @var Git */
    private $git;
    /** @var string */
    private static $fileHeader = <<<'EOT'
# This file was generated by the "git pr init" command.
# For more information, please visit https://github.com/git-pull-request/git-pull-request


EOT;

    /**
     * Constructor.
     */
    public function __construct()
    {
        $this->git = new Git();
    }

    /**
     * @throws \GitPullRequest\Git\Exception\RuntimeException
     *
     * @return array
     */
    public function getGlobalOptions() : array
    {
        return $this->getFileOptions('global');
    }

    /**
     * @throws \GitPullRequest\Git\Exception\RuntimeException
     *
     * @return array
     */
    public function getSharedOptions() : array
    {
        return $this->getFileOptions('shared');
    }

    /**
     * @throws \GitPullRequest\Git\Exception\RuntimeException
     *
     * @return array
     */
    public function getLocalOptions() : array
    {
        return $this->getFileOptions('local');
    }

    /**
     * @param array $options
     */
    public function saveGlobalOptions(array $options)
    {
        $dump = self::$fileHeader.Yaml::dump($options, 99);
        file_put_contents(getenv('HOME').'/.git-pull-request.yml', $dump);
    }

    /**
     * @param array $options
     *
     * @throws \GitPullRequest\Git\Exception\RuntimeException
     */
    public function saveSharedOptions(array $options)
    {
        $dump = self::$fileHeader.Yaml::dump($options, 99);
        file_put_contents($this->git->getProjectRootDir().'/.git-pull-request.yml', $dump);
    }

    /**
     * @param array $options
     *
     * @throws \GitPullRequest\Git\Exception\RuntimeException
     */
    public function saveLocalOptions(array $options)
    {
        $dump = self::$fileHeader.Yaml::dump($options, 99);
        file_put_contents($this->git->getProjectRootDir().'/.git/.git-pull-request.yml', $dump);
    }

    /**
     * @param string $fileType
     *
     * @throws \GitPullRequest\Git\Exception\RuntimeException
     *
     * @return array
     */
    private function getFileOptions(string $fileType) : array
    {
        $files = $this->getFiles();
        if (!array_key_exists($fileType, $files)) {
            return [];
        }

        return $this->parseFile($files[$fileType]);
    }

    /**
     * @throws \GitPullRequest\Git\Exception\RuntimeException
     *
     * @return array
     */
    private function getFiles() : array
    {
        $files = [
            'global' => getenv('HOME').'/.git-pull-request.yml',
        ];

        if ($this->git->isInsideWorkTree()) {
            $workTree        = $this->git->getProjectRootDir();
            $files['shared'] = $workTree.'/.git-pull-request.yml';
            $files['local']  = $workTree.'/.git/.git-pull-request.yml';
        }

        return array_filter(
            $files,
            function ($item) {
                return (new Filesystem())->exists($item);
            }
        );
    }

    /**
     * @param string $file
     *
     * @return array
     */
    private function parseFile(string $file) : array
    {
        try {
            return Yaml::parse(file_get_contents($file));
        } catch (ParseException $exception) {
            return [];
        }
    }
}
